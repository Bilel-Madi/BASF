// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  email           String       @unique
  password        String?
  googleId        String?      @unique
  firstName       String?
  lastName        String?
  role            Role         @default(USER)
  sessions        Session[]
  organizationId  String       @db.ObjectId
  organization    Organization @relation(fields: [organizationId], references: [id])
  activeProjectId String?      @db.ObjectId
  activeProject   Project?     @relation("ActiveProject", fields: [activeProjectId], references: [id])
  Project         Project?     @relation(fields: [projectId], references: [id])
  projectId       String?      @db.ObjectId
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tokenHash String   @unique
  userId    String   @db.ObjectId
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  users   User[]
  zones   Zone[]
  Project Project[]
}

model Project {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  purpose        String
  geometry       Json
  center         Json
  createdAt      DateTime     @default(now())
  organizationId String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  zones          Zone[]
  users          User[]
  activeUsers    User[]       @relation("ActiveProject")
}

model Zone {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  area           Float
  geometry       Json // Store GeoJSON or similar
  color          String
  cropType       String
  plantingDate   DateTime
  harvestDate    DateTime
  notes          String?
  soilType       String
  organizationId String       @db.ObjectId
  devices        Device[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  projectId      String       @db.ObjectId
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Device {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  eui               String     @unique
  name              String
  type              DeviceType
  modelName         String
  installationDate  DateTime
  installedDepth    Float?
  location          Json // Coordinates
  reportingInterval Int
  number            Int?
  zoneId            String?    @db.ObjectId
  zone              Zone?      @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  rssi              Float?
  snr               Float?
  battery_status    Float?
  last_seen         DateTime?

  latest_co2         Float?
  latest_humidity    Float?
  latest_pressure    Float?
  latest_temperature Float?

  latest_ec               Float?
  latest_moisture         Float?
  latest_soil_temperature Float?

  // Relations
  airData  Air[]
  soilData Soil[]
}

model Air {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  receivedAt  DateTime @map("received_at")
  deviceId    String   @map("device_id")
  co2         Float
  humidity    Float
  pressure    Float
  temperature Float
  battery     Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Device      Device   @relation(fields: [deviceId], references: [eui])
}

model Soil {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  receivedAt  DateTime @map("received_at")
  deviceId    String   @map("device_id")
  ec          Float
  moisture    Float
  temperature Float
  battery     Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Device      Device   @relation(fields: [deviceId], references: [eui])
}

enum DeviceType {
  SOIL_MOISTURE
  CO2_SENSOR
  UNKNOWN
}

enum Role {
  ADMIN
  USER
  VIEWER
  SUPER_ADMIN
}

enum ZoneColor {
  PASTEL_PINK
  PASTEL_ORANGE
  PASTEL_YELLOW
  PASTEL_GREEN
  PASTEL_BLUE
  PASTEL_PURPLE
}
